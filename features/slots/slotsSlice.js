import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

function delay(t, v) {
  return new Promise((resolve) => setTimeout(resolve, t, v));
}

const initialState = {
  data: [
    new Array(72).fill(0),
    new Array(72).fill(0),
    new Array(72).fill(0),
    new Array(72).fill(0),
    new Array(72).fill(0),
    new Array(72).fill(0),
    new Array(72).fill(0),
  ],
  isLoading: true,
};

export const getSlots = createAsyncThunk(
  "slots/getSlots",
  async (name, thunkAPI) => {
    try {
      const response = await delay(3000, {
        columns: [
          "8",
          "8:10",
          "8:20",
          "8:30",
          "8:40",
          "8:50",
          "9",
          "9:10",
          "9:20",
          "9:30",
          "9:40",
          "9:50",
          "10",
          "10:10",
          "10:20",
          "10:30",
          "10:40",
          "10:50",
          "11",
          "11:10",
          "11:20",
          "11:30",
          "11:40",
          "11:50",
          "12",
          "12:10",
          "12:20",
          "12:30",
          "12:40",
          "12:50",
          "1",
          "1:10",
          "1:20",
          "1:30",
          "1:40",
          "1:50",
          "2",
          "2:10",
          "2:20",
          "2:30",
          "2:40",
          "2:50",
          "3",
          "3:10",
          "3:20",
          "3:30",
          "3:40",
          "3:50",
          "4",
          "4:10",
          "4:20",
          "4:30",
          "4:40",
          "4:50",
          "5",
          "5:10",
          "5:20",
          "5:30",
          "5:40",
          "5:50",
          "6",
          "6:10",
          "6:20",
          "6:30",
          "6:40",
          "6:50",
          "7",
          "7:10",
          "7:20",
          "7:30",
          "7:40",
          "7:50",
        ],
        index: [
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday",
        ],
        data: [
          [
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1,
          ],
          [
            1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
            1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1,
          ],
          [
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
            0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
            1, 1, 1,
          ],
          [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1,
          ],
          [
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
            1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1,
          ],
          [
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1,
          ],
          [
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1,
          ],
        ],
      });

      return response.data;
    } catch (error) {
      return thunkAPI.rejectWithValue("Something went wrong");
    }
  }
);

const slotsSlice = {
  name: "slots",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(getSlots.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(getSlots.fulfilled, (state, action) => {
        state.isLoading = false;
        state.data = action.payload;
      })
      .addCase(getSlots.rejected, (state, action) => {
        console.log(action);
        state.isLoading = false;
      });
  },
};
